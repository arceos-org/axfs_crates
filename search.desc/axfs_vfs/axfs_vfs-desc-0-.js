searchState.loadedDescShard("axfs_vfs", 0, "Virtual filesystem interfaces used by ArceOS.\nA socket address could not be bound because the address is …\nAn entity already exists, often a file.\nBad address.\nBad internal state.\nBlock device\nCharacter device\nThe connection was refused by the remote server,\nThe connection was reset by the remote server.\nDirectory\nA non-empty directory was specified where an empty …\nContains the error value\nFIFO (named pipe)\nRegular file\nFilesystem attributes.\nGroup has execute permission.\nGroup has read permission.\nGroup has write permission.\nData not valid for the operation were encountered.\nInvalid parameter/argument.\nInput/output error.\nThe filesystem object is, unexpectedly, a directory.\nNot enough space/cannot allocate memory.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nThe requested entity is not found.\nOthers have execute permission.\nOthers have read permission.\nOthers have write permission.\nOwner has execute permission.\nOwner has read permission.\nOwner has write permission.\nContains the success value\nThe operation lacked the necessary privileges to complete.\nDevice or resource is busy.\nSocket\nThe underlying storage (typically, a filesystem) is full.\nSymbolic link\nAn error returned when an operation could not be completed …\nThis operation is unsupported or unimplemented.\nDirectory entry.\nAlias of <code>AxError</code>.\nNode (file/directory) attributes.\nNode (file/directory) operations.\nNode (file/directory) permission mode.\nA wrapper of <code>Arc&lt;dyn VfsNodeOps&gt;</code>.\nNode (file/directory) type.\nFilesystem operations.\nAlias of <code>AxResult</code>.\nThe operation needs to block to complete, but the blocking …\nAn error returned when an operation could not be completed …\nGet a flags value with all known bits set.\nConvert <code>&amp;self</code> to <code>&amp;dyn Any</code> that can use <code>Any::downcast_ref</code>.\nReturns a character representation of the node type.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the number of blocks the node occupies on the disk.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreate a new node with the given <code>path</code> in the directory\nCreates an empty <code>VfsDirEntry</code>.\nReturns the default permission for a directory.\nReturns the default permission for a file.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns the type of the entry.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the type of the node.\nFormat the filesystem.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nFlush the file, synchronize the data to disk.\nGet the attributes of the node.\nWhen implement <code>VfsNodeOps</code> on a directory node, add dummy …\nWhen implement <code>VfsNodeOps</code> on a non-directory node, add …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if this node type is a block device.\nReturns <code>true</code> if this node type is a char device.\nWhether the node is a directory.\nTests whether this node type represents a directory.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this node type is a fifo.\nWhether the node is a file.\nTests whether this node type represents a regular file.\nReturns <code>true</code> if this node type is a socket.\nTests whether this node type represents a symbolic link.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLookup the node with given <code>path</code> in the directory.\nReturns the underlying raw <code>st_mode</code> bits that contain the …\nDo something when the filesystem is mounted.\nConverts the name of the entry to a byte slice.\nCreates a new <code>VfsDirEntry</code> with the given name and type.\nCreates a new <code>VfsNodeAttr</code> with the given permission mode, …\nCreates a new <code>VfsNodeAttr</code> for a directory, with the …\nCreates a new <code>VfsNodeAttr</code> for a file, with the default …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDo something when the node is opened.\nWhether the owner has execute permission.\nWhether the owner has read permission.\nWhether the owner has write permission.\nGet the parent directory of this directory.\nUtilities for path manipulation.\nReturns the permission of the node.\nRead data from the file at the given offset.\nRead directory entries into <code>dirents</code>, starting from …\nDo something when the node is closed.\nRemove the node with the given <code>path</code> in the directory.\nThe intersection of a source flags value with the …\nRenames or moves existing file or directory.\nGet the root directory of the filesystem.\nReturns a 9-bytes string representation of the permission.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the permission of the node.\nReturns the size of the node.\nGet the attributes of the filesystem.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTruncate the file to the given size.\nDo something when the filesystem is unmounted.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWrite data to the file at the given offset.\nReturns the canonical form of the path with all …")